{"ast":null,"code":"import StravaTemplate from \"./stravaTemplate\";\nimport capitalizeFirstLetter from \"./capitalizeFirstLetter\";\n\nfunction searchSummaries(summaries, metric) {\n  for (const summary of summaries) {\n    if (summary.metric === metric) return summary.value;\n  }\n}\n\nfunction formatNike(nikeActivities) {\n  const formattedNike = [];\n  nikeActivities.forEach(activity => {\n    //get summaries array for later use\n    let summaries = activity.summaries;\n    let id = activity.id;\n    let name = activity.tags[\"com.nike.name\"];\n    let type = capitalizeFirstLetter(activity.type);\n    let moving_time = Math.round(parseInt(activity.active_duration_ms) / 1000);\n    let date = new Date(parseInt(activity.start_epoch_ms));\n    let start_date_local = date.getUTCFullYear() + \"-\" + (date.getUTCMonth() + 1) + \"-\" + date.getUTCDate();\n    let description = `${activity.tags[\"com.nike.temperature\"]} degrees. ${activity.tags[\"com.nike.weather\"]}. Imported from Nike Run Club`;\n    let distance = Math.round(searchSummaries(summaries, \"distance\") * 1000);\n    let total_elevation_gain = 10; //Math.round(searchSummaries(summaries, \"ascent\"));\n\n    let average_heartrate = null;\n    let isSelected = false; //create new instance of strava template\n\n    let nikeObj = new StravaTemplate(id, name, type, moving_time, start_date_local, description, distance, total_elevation_gain, average_heartrate, isSelected); //append template to formatted nike array\n\n    formattedNike.push(nikeObj);\n  });\n  return formattedNike;\n}\n\nexport default formatNike;","map":{"version":3,"sources":["C:/Users/colin/Desktop/GitHub/running-app/client/src/utils/formatNike.js"],"names":["StravaTemplate","capitalizeFirstLetter","searchSummaries","summaries","metric","summary","value","formatNike","nikeActivities","formattedNike","forEach","activity","id","name","tags","type","moving_time","Math","round","parseInt","active_duration_ms","date","Date","start_epoch_ms","start_date_local","getUTCFullYear","getUTCMonth","getUTCDate","description","distance","total_elevation_gain","average_heartrate","isSelected","nikeObj","push"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAEA,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,MAApC,EAA4C;AAC1C,OAAK,MAAMC,OAAX,IAAsBF,SAAtB,EAAiC;AAC/B,QAAIE,OAAO,CAACD,MAAR,KAAmBA,MAAvB,EAA+B,OAAOC,OAAO,CAACC,KAAf;AAChC;AACF;;AAED,SAASC,UAAT,CAAoBC,cAApB,EAAoC;AAClC,QAAMC,aAAa,GAAG,EAAtB;AAEAD,EAAAA,cAAc,CAACE,OAAf,CAAwBC,QAAD,IAAc;AACnC;AACA,QAAIR,SAAS,GAAGQ,QAAQ,CAACR,SAAzB;AAEA,QAAIS,EAAE,GAAGD,QAAQ,CAACC,EAAlB;AACA,QAAIC,IAAI,GAAGF,QAAQ,CAACG,IAAT,CAAc,eAAd,CAAX;AACA,QAAIC,IAAI,GAAGd,qBAAqB,CAACU,QAAQ,CAACI,IAAV,CAAhC;AACA,QAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,QAAQ,CAACR,QAAQ,CAACS,kBAAV,CAAR,GAAwC,IAAnD,CAAlB;AACA,QAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASH,QAAQ,CAACR,QAAQ,CAACY,cAAV,CAAjB,CAAX;AACA,QAAIC,gBAAgB,GAClBH,IAAI,CAACI,cAAL,KACA,GADA,IAECJ,IAAI,CAACK,WAAL,KAAqB,CAFtB,IAGA,GAHA,GAIAL,IAAI,CAACM,UAAL,EALF;AAMA,QAAIC,WAAW,GAAI,GAAEjB,QAAQ,CAACG,IAAT,CAAc,sBAAd,CAAsC,aAAYH,QAAQ,CAACG,IAAT,CAAc,kBAAd,CAAkC,+BAAzG;AACA,QAAIe,QAAQ,GAAGZ,IAAI,CAACC,KAAL,CAAWhB,eAAe,CAACC,SAAD,EAAY,UAAZ,CAAf,GAAyC,IAApD,CAAf;AACA,QAAI2B,oBAAoB,GAAG,EAA3B,CAjBmC,CAiBL;;AAC9B,QAAIC,iBAAiB,GAAG,IAAxB;AACA,QAAIC,UAAU,GAAG,KAAjB,CAnBmC,CAqBnC;;AACA,QAAIC,OAAO,GAAG,IAAIjC,cAAJ,CACZY,EADY,EAEZC,IAFY,EAGZE,IAHY,EAIZC,WAJY,EAKZQ,gBALY,EAMZI,WANY,EAOZC,QAPY,EAQZC,oBARY,EASZC,iBATY,EAUZC,UAVY,CAAd,CAtBmC,CAkCnC;;AACAvB,IAAAA,aAAa,CAACyB,IAAd,CAAmBD,OAAnB;AACD,GApCD;AAqCA,SAAOxB,aAAP;AACD;;AACD,eAAeF,UAAf","sourcesContent":["import StravaTemplate from \"./stravaTemplate\";\r\nimport capitalizeFirstLetter from \"./capitalizeFirstLetter\"\r\n\r\nfunction searchSummaries(summaries, metric) {\r\n  for (const summary of summaries) {\r\n    if (summary.metric === metric) return summary.value;\r\n  }\r\n}\r\n\r\nfunction formatNike(nikeActivities) {\r\n  const formattedNike = [];\r\n\r\n  nikeActivities.forEach((activity) => {\r\n    //get summaries array for later use\r\n    let summaries = activity.summaries;\r\n\r\n    let id = activity.id;\r\n    let name = activity.tags[\"com.nike.name\"];\r\n    let type = capitalizeFirstLetter(activity.type);\r\n    let moving_time = Math.round(parseInt(activity.active_duration_ms) / 1000);\r\n    let date = new Date(parseInt(activity.start_epoch_ms));\r\n    let start_date_local =\r\n      date.getUTCFullYear() +\r\n      \"-\" +\r\n      (date.getUTCMonth() + 1) +\r\n      \"-\" +\r\n      date.getUTCDate();\r\n    let description = `${activity.tags[\"com.nike.temperature\"]} degrees. ${activity.tags[\"com.nike.weather\"]}. Imported from Nike Run Club`;\r\n    let distance = Math.round(searchSummaries(summaries, \"distance\") * 1000);\r\n    let total_elevation_gain = 10;//Math.round(searchSummaries(summaries, \"ascent\"));\r\n    let average_heartrate = null;\r\n    let isSelected = false;\r\n\r\n    //create new instance of strava template\r\n    let nikeObj = new StravaTemplate(\r\n      id,\r\n      name,\r\n      type,\r\n      moving_time,\r\n      start_date_local,\r\n      description,\r\n      distance,\r\n      total_elevation_gain,\r\n      average_heartrate,\r\n      isSelected\r\n    );\r\n    //append template to formatted nike array\r\n    formattedNike.push(nikeObj);\r\n  });\r\n  return formattedNike;\r\n}\r\nexport default formatNike;\r\n"]},"metadata":{},"sourceType":"module"}