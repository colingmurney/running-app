{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\colin\\\\Desktop\\\\GitHub\\\\running-app\\\\client\\\\src\\\\components\\\\converter.jsx\";\nimport React, { Component } from \"react\";\nimport NikeForm from \"./nikeForm\";\nimport handleNikeForm from \"../utils/handleNikeForm\";\nimport createActivity from \"../utils/createActivity\";\nimport getRefreshToken from \"../utils/getRefreshToken\";\nimport Table from \"./table\";\n\nclass Converter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      client_id: \"47805\",\n      client_secret: \"aeb849953d794088bb82fbce08b6e12588fa7725\",\n      refresh_token: \"\",\n      activities: JSON.parse(sessionStorage.getItem(\"nikeActivities\")) || [],\n      selectedIndex: [],\n      convertedActivities: []\n    };\n\n    this.handleSubmit = async token => {\n      const activities = await handleNikeForm(token);\n      this.setState({\n        activities\n      });\n    };\n\n    this.handleConvert = async () => {\n      //check if selectedIndex length is 0, is it is, return no runs selected\n      //get param from url\n      // const search = this.props.location.search;\n      // const params = new URLSearchParams(search);\n      // const authCode = params.get(\"code\");\n      const {\n        client_id,\n        client_secret,\n        activities,\n        selectedIndex,\n        refresh_token\n      } = this.state;\n\n      try {\n        // const refresh_token = await getRefreshToken(\n        //   client_id,\n        //   client_secret,\n        //   authCode\n        // );\n        if (!refresh_token) return console.log(\"No refresh token (Please give authorization)\");\n\n        for (let i of selectedIndex) {\n          // console.log(activities[i].name)\n          // console.log(activities[i].type)\n          // console.log(activities[i].start_date_local)\n          // console.log(activities[i].moving_time)\n          // console.log(activities[i].description)\n          // console.log(activities[i].distance)\n          const activityCreated = await createActivity(client_id, client_secret, refresh_token, activities[i].name, activities[i].type, activities[i].start_date_local, activities[i].moving_time, activities[i].description, activities[i].distance);\n          console.log(activityCreated); //unselect activities after conversion and empty selectedIndex\n          //unselect part may go in loop since I need to reset the isSelected prop for everything in selectedIndex\n          //const selectedIndex = []\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.handleSelect = index => {\n      const activities = [...this.state.activities];\n      activities[index].isSelected = !activities[index].isSelected;\n      const selectedIndex = [...this.state.selectedIndex];\n\n      if (selectedIndex.includes(index)) {\n        const indexInSelectedIndex = selectedIndex.indexOf(index);\n        selectedIndex.splice(indexInSelectedIndex, 1);\n      } else {\n        selectedIndex.push(index);\n      }\n\n      this.setState({\n        activities,\n        selectedIndex\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const search = this.props.location.search;\n    const params = new URLSearchParams(search);\n    const authCode = params.get(\"code\");\n    console.log(authCode);\n\n    if (authCode) {\n      try {\n        const refresh_token = await getRefreshToken(this.state.client_id, this.state.client_secret, authCode);\n        this.setState({\n          refresh_token\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  render() {\n    const {\n      activities,\n      isSelected\n    } = this.state;\n    console.log(this.state.selectedIndex);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NikeForm, {\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://www.strava.com/oauth/authorize?client_id=47805&response_type=code&redirect_uri=http://localhost:3000/converter/exchange_token&approval_prompt=force&scope=activity:write\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, \"authorize\")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleConvert,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, \"Convert\"), activities && !!activities.length && /*#__PURE__*/React.createElement(Table, {\n      activities: activities,\n      handleSelect: this.handleSelect,\n      isSelected: isSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Converter;","map":{"version":3,"sources":["C:/Users/colin/Desktop/GitHub/running-app/client/src/components/converter.jsx"],"names":["React","Component","NikeForm","handleNikeForm","createActivity","getRefreshToken","Table","Converter","state","client_id","client_secret","refresh_token","activities","JSON","parse","sessionStorage","getItem","selectedIndex","convertedActivities","handleSubmit","token","setState","handleConvert","console","log","i","activityCreated","name","type","start_date_local","moving_time","description","distance","error","handleSelect","index","isSelected","includes","indexInSelectedIndex","indexOf","splice","push","componentDidMount","search","props","location","params","URLSearchParams","authCode","get","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport NikeForm from \"./nikeForm\";\r\nimport handleNikeForm from \"../utils/handleNikeForm\"\r\nimport createActivity from \"../utils/createActivity\"\r\nimport getRefreshToken from \"../utils/getRefreshToken\"\r\nimport Table from \"./table\";\r\n\r\nclass Converter extends Component {\r\n  state = {\r\n    client_id: \"47805\",\r\n    client_secret: \"aeb849953d794088bb82fbce08b6e12588fa7725\",\r\n    refresh_token: \"\",\r\n    activities: JSON.parse(sessionStorage.getItem(\"nikeActivities\")) || [],\r\n    selectedIndex: [],\r\n    convertedActivities: []\r\n  }\r\n   \r\n  async componentDidMount(){\r\n      const search = this.props.location.search;\r\n      const params = new URLSearchParams(search);\r\n      const authCode = params.get(\"code\");\r\n\r\n      console.log(authCode)\r\n\r\n      if (authCode) {\r\n        try {\r\n          const refresh_token = await getRefreshToken(\r\n            this.state.client_id,\r\n            this.state.client_secret,\r\n            authCode\r\n          )\r\n\r\n          this.setState({refresh_token})\r\n        } catch(error) {\r\n          console.log(error)\r\n        }\r\n      } \r\n      \r\n\r\n  }\r\n\r\n    handleSubmit = async (token) => {\r\n      const activities = await handleNikeForm(token)\r\n      this.setState({activities})\r\n    }\r\n\r\n    handleConvert = async () => {\r\n      \r\n     //check if selectedIndex length is 0, is it is, return no runs selected\r\n\r\n      //get param from url\r\n      // const search = this.props.location.search;\r\n      // const params = new URLSearchParams(search);\r\n      // const authCode = params.get(\"code\");\r\n\r\n      const {client_id, client_secret, activities, selectedIndex, refresh_token} = this.state\r\n      \r\n      try {\r\n        // const refresh_token = await getRefreshToken(\r\n        //   client_id,\r\n        //   client_secret,\r\n        //   authCode\r\n        // );\r\n      \r\n      if (!refresh_token) return console.log(\"No refresh token (Please give authorization)\")\r\n        \r\n      for (let i of selectedIndex) {\r\n            // console.log(activities[i].name)\r\n            // console.log(activities[i].type)\r\n            // console.log(activities[i].start_date_local)\r\n            // console.log(activities[i].moving_time)\r\n            // console.log(activities[i].description)\r\n            // console.log(activities[i].distance)\r\n        \r\n          const activityCreated = await createActivity(\r\n            client_id,\r\n            client_secret,\r\n            refresh_token,\r\n            activities[i].name,\r\n            activities[i].type,\r\n            activities[i].start_date_local,\r\n            activities[i].moving_time,\r\n            activities[i].description,\r\n            activities[i].distance\r\n          );\r\n          console.log(activityCreated)\r\n          \r\n          //unselect activities after conversion and empty selectedIndex\r\n          //unselect part may go in loop since I need to reset the isSelected prop for everything in selectedIndex\r\n          //const selectedIndex = []\r\n        }\r\n        \r\n        \r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    \r\n    }\r\n\r\n    handleSelect = (index) => {\r\n      const activities = [...this.state.activities];\r\n      activities[index].isSelected = !activities[index].isSelected;\r\n      \r\n      const selectedIndex = [...this.state.selectedIndex];\r\n      if (selectedIndex.includes(index)) {\r\n        const indexInSelectedIndex = selectedIndex.indexOf(index)\r\n        selectedIndex.splice(indexInSelectedIndex, 1)\r\n      } else {\r\n        selectedIndex.push(index)\r\n      }\r\n\r\n      this.setState({activities, selectedIndex})\r\n      \r\n    }\r\n\r\n  render() {\r\n    const {activities, isSelected} = this.state;\r\n\r\n    console.log(this.state.selectedIndex)\r\n    return (\r\n      <div>\r\n        <NikeForm handleSubmit={this.handleSubmit} />\r\n        <button><a href=\"http://www.strava.com/oauth/authorize?client_id=47805&response_type=code&redirect_uri=http://localhost:3000/converter/exchange_token&approval_prompt=force&scope=activity:write\">authorize</a></button>\r\n        <button onClick={this.handleConvert}>Convert</button>\r\n        {activities && !!activities.length &&\r\n        <Table activities={activities} handleSelect={this.handleSelect} isSelected={isSelected}/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Converter;\r\n"]},"metadata":{},"sourceType":"module"}