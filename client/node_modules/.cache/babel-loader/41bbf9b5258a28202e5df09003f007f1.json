{"ast":null,"code":"/* jshint node:true */\n'use strict';\n/**\n * Module dependencies.\n */\n//const _ = require('underscore');\n\nconst Parser = require('./parser/csv');\n\nconst Stream = require('./core/stream');\n\nconst helper = require('./core/helper');\n\nconst EOL = require('./core/eol');\n/**\n * Main function that converts json to csv\n *\n * @param {Object|Array} json\n * @param {Object} [options]\n * @param {Function} callback(err, csv) - Callback function\n *      if error, returning error in call back.\n *      if csv is created successfully, returning csv output to callback.\n */\n\n\nmodule.exports = function () {\n  const DEFAULT_OPTIONS = {\n    headers: [],\n    //              Array\n    rename: [],\n    //               Array\n    headerPathString: '.',\n    //    String\n    rowDelimiter: ',',\n    //        String\n    textDelimiter: '\"',\n    //       String\n    arrayPathString: ';',\n    //     String\n    undefinedString: '',\n    //      String\n    endOfLine: EOL || '\\n',\n    //   String\n    mainPathItem: null,\n    //       String\n    booleanTrueString: null,\n    //  String\n    booleanFalseString: null,\n    // String\n    includeHeaders: true,\n    //     Boolean\n    fillGaps: false,\n    //          Boolean\n    verticalOutput: true,\n    //     Boolean\n    forceTextDelimiter: false //Boolean\n\n  }; // argument parsing\n\n  let json, userOptions, callback;\n\n  if (arguments.length === 3) {\n    [json, userOptions, callback] = arguments;\n  } else if (arguments.length === 2) {\n    let any;\n    [json, any] = arguments;\n\n    if (typeof any === 'function') {\n      callback = any;\n    } else if (typeof any === 'object') {\n      userOptions = any;\n    }\n  } else if (arguments.length === 1) {\n    const [any] = arguments;\n\n    if (typeof any === 'object') {\n      const defaultKeys = Object.keys(DEFAULT_OPTIONS);\n      const objectKeys = Object.keys(any);\n      const isOptions = objectKeys.every(key => defaultKeys.includes(key));\n\n      if (objectKeys.length > 0 && isOptions) {\n        userOptions = any;\n      } else {\n        json = any;\n      }\n    } else {\n      json = any;\n    }\n  } else {\n    return new Stream(new Parser(DEFAULT_OPTIONS));\n  }\n\n  const options = Object.assign({}, DEFAULT_OPTIONS, userOptions);\n  const parser = new Parser(options); // if no json is provided Stream API will be used\n\n  if (!json) {\n    return new Stream(parser);\n  } // always return an promise\n\n\n  return new Promise((resolve, reject) => {\n    parser.parse(json, (err, result) => {\n      if (callback) return callback(err, result);\n      if (err) return reject(err);\n      if (reject) return resolve(result);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/colin/Desktop/GitHub/running-app/client/node_modules/jsonexport/lib/index.js"],"names":["Parser","require","Stream","helper","EOL","module","exports","DEFAULT_OPTIONS","headers","rename","headerPathString","rowDelimiter","textDelimiter","arrayPathString","undefinedString","endOfLine","mainPathItem","booleanTrueString","booleanFalseString","includeHeaders","fillGaps","verticalOutput","forceTextDelimiter","json","userOptions","callback","arguments","length","any","defaultKeys","Object","keys","objectKeys","isOptions","every","key","includes","options","assign","parser","Promise","resolve","reject","parse","err","result"],"mappings":"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","sourcesContent":["/* jshint node:true */\n'use strict';\n/**\n * Module dependencies.\n */\n//const _ = require('underscore');\nconst Parser = require('./parser/csv');\nconst Stream = require('./core/stream');\nconst helper = require('./core/helper');\nconst EOL = require('./core/eol');\n\n/**\n * Main function that converts json to csv\n *\n * @param {Object|Array} json\n * @param {Object} [options]\n * @param {Function} callback(err, csv) - Callback function\n *      if error, returning error in call back.\n *      if csv is created successfully, returning csv output to callback.\n */\nmodule.exports = function() {\n  const DEFAULT_OPTIONS = {\n    headers: [], //              Array\n    rename: [], //               Array\n    headerPathString: '.', //    String\n    rowDelimiter: ',', //        String\n    textDelimiter: '\"', //       String\n    arrayPathString: ';', //     String\n    undefinedString: '', //      String\n    endOfLine: EOL || '\\n', //   String\n    mainPathItem: null, //       String\n    booleanTrueString: null, //  String\n    booleanFalseString: null, // String\n    includeHeaders: true, //     Boolean\n    fillGaps: false, //          Boolean\n    verticalOutput: true, //     Boolean\n    forceTextDelimiter: false, //Boolean\n  };\n  // argument parsing\n  let json, userOptions, callback;\n  if (arguments.length === 3) {\n    [json, userOptions, callback] = arguments;\n  } else if (arguments.length === 2) {\n    let any;\n    [json, any] = arguments;\n    if (typeof any === 'function') {\n      callback = any;\n    } else if (typeof any === 'object') {\n      userOptions = any;\n    }\n  } else if (arguments.length === 1) {\n    const [any] = arguments;\n    if (typeof any === 'object') {\n      const defaultKeys = Object.keys(DEFAULT_OPTIONS);\n      const objectKeys = Object.keys(any);\n      const isOptions = objectKeys.every((key) => defaultKeys.includes(key)); \n      if (objectKeys.length > 0 && isOptions) {\n        userOptions = any;\n      } else {\n        json = any;\n      }\n    } else {\n      json = any;\n    }\n  } else {\n    return new Stream(new Parser(DEFAULT_OPTIONS));\n  }\n  const options = Object.assign({}, DEFAULT_OPTIONS, userOptions);\n  const parser = new Parser(options);\n  // if no json is provided Stream API will be used\n  if (!json) {\n    return new Stream(parser);\n  }\n  // always return an promise\n  return new Promise((resolve, reject) => {\n    parser.parse(json, (err, result) => {\n      if (callback) return callback(err, result);\n      if (err) return reject(err);\n      if (reject) return resolve(result);\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"script"}